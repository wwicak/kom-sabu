{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/security.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport DOMPurify from 'dompurify'\nimport { JSDOM } from 'jsdom'\nimport validator from 'validator'\nimport CryptoJS from 'crypto-js'\n\n// Initialize DOMPurify for server-side use\nconst window = new JSDOM('').window\nconst purify = DOMPurify(window as any)\n\n// Security configuration\nexport const SECURITY_CONFIG = {\n  // Rate limiting\n  RATE_LIMIT: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100, // limit each IP to 100 requests per windowMs\n    message: 'Too many requests from this IP, please try again later.',\n  },\n  \n  // CSRF protection\n  CSRF: {\n    secret: process.env.CSRF_SECRET || 'default-csrf-secret-change-in-production',\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict' as const,\n      maxAge: 3600000, // 1 hour\n    },\n  },\n  \n  // Session configuration\n  SESSION: {\n    secret: process.env.SESSION_SECRET || 'default-session-secret-change-in-production',\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    sameSite: 'strict' as const,\n  },\n  \n  // Content Security Policy\n  CSP: {\n    'default-src': [\"'self'\"],\n    'script-src': [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"],\n    'style-src': [\"'self'\", \"'unsafe-inline'\", 'https://fonts.googleapis.com'],\n    'font-src': [\"'self'\", 'https://fonts.gstatic.com'],\n    'img-src': [\"'self'\", 'data:', 'https:'],\n    'connect-src': [\"'self'\"],\n    'frame-ancestors': [\"'none'\"],\n    'base-uri': [\"'self'\"],\n    'form-action': [\"'self'\"],\n  },\n}\n\n// XSS Protection - Sanitize HTML content\nexport function sanitizeHtml(dirty: string): string {\n  return purify.sanitize(dirty, {\n    ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'a', 'p', 'br'],\n    ALLOWED_ATTR: ['href'],\n  })\n}\n\n// Input validation utilities\nexport const validateInput = {\n  email: (email: string): boolean => {\n    return validator.isEmail(email) && email.length <= 254\n  },\n  \n  phone: (phone: string): boolean => {\n    return validator.isMobilePhone(phone, 'any')\n  },\n  \n  name: (name: string): boolean => {\n    return validator.isLength(name, { min: 1, max: 100 }) && \n           validator.matches(name, /^[a-zA-Z\\s'-]+$/)\n  },\n  \n  message: (message: string): boolean => {\n    return validator.isLength(message, { min: 1, max: 1000 })\n  },\n  \n  url: (url: string): boolean => {\n    return validator.isURL(url, {\n      protocols: ['http', 'https'],\n      require_protocol: true,\n    })\n  },\n}\n\n// Encrypt sensitive data\nexport function encryptData(data: string): string {\n  const key = process.env.ENCRYPTION_KEY || 'default-encryption-key-change-in-production'\n  return CryptoJS.AES.encrypt(data, key).toString()\n}\n\n// Decrypt sensitive data\nexport function decryptData(encryptedData: string): string {\n  const key = process.env.ENCRYPTION_KEY || 'default-encryption-key-change-in-production'\n  const bytes = CryptoJS.AES.decrypt(encryptedData, key)\n  return bytes.toString(CryptoJS.enc.Utf8)\n}\n\n// Generate secure random token\nexport function generateSecureToken(): string {\n  return CryptoJS.lib.WordArray.random(32).toString()\n}\n\n// Security headers middleware\nexport function setSecurityHeaders(response: NextResponse): NextResponse {\n  // Prevent XSS attacks\n  response.headers.set('X-XSS-Protection', '1; mode=block')\n  \n  // Prevent clickjacking\n  response.headers.set('X-Frame-Options', 'DENY')\n  \n  // Prevent MIME type sniffing\n  response.headers.set('X-Content-Type-Options', 'nosniff')\n  \n  // Enforce HTTPS\n  if (process.env.NODE_ENV === 'production') {\n    response.headers.set('Strict-Transport-Security', 'max-age=31536000; includeSubDomains')\n  }\n  \n  // Content Security Policy\n  const cspString = Object.entries(SECURITY_CONFIG.CSP)\n    .map(([directive, sources]) => `${directive} ${sources.join(' ')}`)\n    .join('; ')\n  response.headers.set('Content-Security-Policy', cspString)\n  \n  // Referrer Policy\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n  \n  // Permissions Policy\n  response.headers.set('Permissions-Policy', 'geolocation=(), microphone=(), camera=()')\n  \n  return response\n}\n\n// Rate limiting store (in production, use Redis or similar)\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>()\n\n// Enhanced rate limiting function with configurable options\nexport function checkRateLimit(\n  ip: string,\n  options?: { windowMs?: number; max?: number }\n): boolean {\n  const now = Date.now()\n  const windowMs = options?.windowMs || SECURITY_CONFIG.RATE_LIMIT.windowMs\n  const maxRequests = options?.max || SECURITY_CONFIG.RATE_LIMIT.max\n\n  const record = rateLimitStore.get(ip)\n\n  if (!record || now > record.resetTime) {\n    rateLimitStore.set(ip, { count: 1, resetTime: now + windowMs })\n    return true\n  }\n\n  if (record.count >= maxRequests) {\n    return false\n  }\n\n  record.count++\n  return true\n}\n\n// Clean up expired rate limit records\nexport function cleanupRateLimitStore(): void {\n  const now = Date.now()\n  for (const [ip, record] of rateLimitStore.entries()) {\n    if (now > record.resetTime) {\n      rateLimitStore.delete(ip)\n    }\n  }\n}\n\n// Get rate limit info for an IP\nexport function getRateLimitInfo(ip: string): {\n  count: number\n  remaining: number\n  resetTime: number\n  isLimited: boolean\n} {\n  const now = Date.now()\n  const windowMs = SECURITY_CONFIG.RATE_LIMIT.windowMs\n  const maxRequests = SECURITY_CONFIG.RATE_LIMIT.max\n\n  const record = rateLimitStore.get(ip)\n\n  if (!record || now > record.resetTime) {\n    return {\n      count: 0,\n      remaining: maxRequests,\n      resetTime: now + windowMs,\n      isLimited: false\n    }\n  }\n\n  return {\n    count: record.count,\n    remaining: Math.max(0, maxRequests - record.count),\n    resetTime: record.resetTime,\n    isLimited: record.count >= maxRequests\n  }\n}\n\n// CSRF token validation\nexport function validateCSRFToken(token: string, sessionToken: string): boolean {\n  return token === sessionToken && token.length === 64\n}\n\n// Secure password hashing (for future authentication)\nexport async function hashPassword(password: string): Promise<string> {\n  const bcrypt = await import('bcryptjs')\n  const saltRounds = 12\n  return bcrypt.hash(password, saltRounds)\n}\n\n// Verify password\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  const bcrypt = await import('bcryptjs')\n  return bcrypt.compare(password, hash)\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 279, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { setSecurityHeaders, checkRateLimit, validateCSRFToken } from './src/lib/security'\n\n// Security configuration\nconst SECURITY_CONFIG = {\n  // Paths that require CSRF protection\n  csrfProtectedPaths: ['/api/contact', '/api/upload', '/api/admin'],\n\n  // Paths that require authentication\n  protectedPaths: ['/admin', '/api/admin'],\n\n  // Paths with stricter rate limiting\n  strictRateLimitPaths: ['/api/contact', '/api/upload', '/api/auth'],\n\n  // Blocked user agents (bots, scrapers)\n  blockedUserAgents: [\n    /bot/i,\n    /crawler/i,\n    /spider/i,\n    /scraper/i,\n    /curl/i,\n    /wget/i,\n    /python-requests/i,\n  ],\n\n  // Blocked countries (if needed)\n  blockedCountries: [], // Add country codes if needed\n\n  // Suspicious patterns in URLs\n  suspiciousPatterns: [\n    /\\.\\./,           // Directory traversal\n    /\\/etc\\/passwd/,  // System file access\n    /\\/proc\\//,       // Process information\n    /\\bscript\\b/i,    // Script injection\n    /\\bjavascript:/i, // JavaScript protocol\n    /\\bdata:/i,       // Data URLs\n    /\\bvbscript:/i,   // VBScript\n    /\\bon\\w+=/i,      // Event handlers\n    /<script/i,       // Script tags\n    /\\beval\\(/i,      // Eval function\n    /\\balert\\(/i,     // Alert function\n  ]\n}\n\nexport function middleware(request: NextRequest) {\n  const { pathname, search } = request.nextUrl\n  const fullUrl = pathname + search\n  const userAgent = request.headers.get('user-agent') || ''\n\n  // Get client IP with multiple fallbacks\n  const ip = request.ip ||\n             request.headers.get('x-forwarded-for')?.split(',')[0]?.trim() ||\n             request.headers.get('x-real-ip') ||\n             request.headers.get('cf-connecting-ip') || // Cloudflare\n             request.headers.get('x-client-ip') ||\n             'unknown'\n\n  // 1. Block suspicious user agents\n  if (SECURITY_CONFIG.blockedUserAgents.some(pattern => pattern.test(userAgent))) {\n    console.warn(`Blocked suspicious user agent: ${userAgent} from IP: ${ip}`)\n    return new NextResponse('Forbidden', { status: 403 })\n  }\n\n  // 2. Check for suspicious URL patterns\n  if (SECURITY_CONFIG.suspiciousPatterns.some(pattern => pattern.test(fullUrl))) {\n    console.warn(`Blocked suspicious URL pattern: ${fullUrl} from IP: ${ip}`)\n    return new NextResponse('Bad Request', { status: 400 })\n  }\n\n  // 3. Validate request size (prevent large payload attacks)\n  const contentLength = request.headers.get('content-length')\n  if (contentLength && parseInt(contentLength) > 10 * 1024 * 1024) { // 10MB limit\n    console.warn(`Blocked large request: ${contentLength} bytes from IP: ${ip}`)\n    return new NextResponse('Payload Too Large', { status: 413 })\n  }\n\n  // 4. Apply rate limiting (stricter for sensitive endpoints)\n  const isStrictPath = SECURITY_CONFIG.strictRateLimitPaths.some(path => pathname.startsWith(path))\n  const rateLimitPassed = isStrictPath ?\n    checkRateLimit(ip, { windowMs: 15 * 60 * 1000, max: 20 }) : // 20 requests per 15 minutes\n    checkRateLimit(ip) // Default rate limiting\n\n  if (!rateLimitPassed) {\n    console.warn(`Rate limit exceeded for IP: ${ip} on path: ${pathname}`)\n    return new NextResponse('Too Many Requests', {\n      status: 429,\n      headers: {\n        'Retry-After': '900', // 15 minutes\n        'X-RateLimit-Limit': isStrictPath ? '20' : '100',\n        'X-RateLimit-Remaining': '0',\n        'X-RateLimit-Reset': new Date(Date.now() + 15 * 60 * 1000).toISOString(),\n      },\n    })\n  }\n\n  // 5. CSRF Protection for state-changing operations\n  if (request.method !== 'GET' && request.method !== 'HEAD' && request.method !== 'OPTIONS') {\n    if (SECURITY_CONFIG.csrfProtectedPaths.some(path => pathname.startsWith(path))) {\n      const csrfToken = request.headers.get('x-csrf-token') ||\n                       request.headers.get('x-xsrf-token')\n      const sessionToken = request.cookies.get('csrf-token')?.value\n\n      if (!csrfToken || !sessionToken || !validateCSRFToken(csrfToken, sessionToken)) {\n        console.warn(`CSRF token validation failed for IP: ${ip} on path: ${pathname}`)\n        return new NextResponse('Forbidden - Invalid CSRF Token', { status: 403 })\n      }\n    }\n  }\n\n  // 6. Check for SQL injection patterns in query parameters\n  const queryString = search.toLowerCase()\n  const sqlInjectionPatterns = [\n    /union\\s+select/i,\n    /drop\\s+table/i,\n    /insert\\s+into/i,\n    /delete\\s+from/i,\n    /update\\s+set/i,\n    /exec\\s*\\(/i,\n    /script\\s*>/i,\n    /'.*or.*'.*=/i,\n    /\".*or.*\".*=/i,\n  ]\n\n  if (sqlInjectionPatterns.some(pattern => pattern.test(queryString))) {\n    console.warn(`Blocked SQL injection attempt: ${queryString} from IP: ${ip}`)\n    return new NextResponse('Bad Request', { status: 400 })\n  }\n\n  // 7. Validate HTTP methods\n  const allowedMethods = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS']\n  if (!allowedMethods.includes(request.method)) {\n    return new NextResponse('Method Not Allowed', { status: 405 })\n  }\n\n  // 8. Check for path traversal attempts\n  if (pathname.includes('../') || pathname.includes('..\\\\')) {\n    console.warn(`Blocked path traversal attempt: ${pathname} from IP: ${ip}`)\n    return new NextResponse('Bad Request', { status: 400 })\n  }\n\n  // Create response and apply security headers\n  const response = NextResponse.next()\n\n  // 9. Set comprehensive security headers\n  const secureResponse = setSecurityHeaders(response)\n\n  // 10. Add additional security headers\n  secureResponse.headers.set('X-Request-ID', crypto.randomUUID())\n  secureResponse.headers.set('X-Timestamp', new Date().toISOString())\n\n  // 11. Remove server information\n  secureResponse.headers.delete('Server')\n  secureResponse.headers.delete('X-Powered-By')\n\n  // 12. Set CSRF token for GET requests\n  if (request.method === 'GET' && !request.cookies.get('csrf-token')) {\n    const csrfToken = crypto.randomUUID()\n    secureResponse.cookies.set('csrf-token', csrfToken, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 3600, // 1 hour\n    })\n  }\n\n  return secureResponse\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - robots.txt, sitemap.xml (SEO files)\n     */\n    '/((?!_next/static|_next/image|favicon.ico|robots.txt|sitemap.xml).*)',\n  ],\n}\n"],"names":[],"mappings":"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"}}]
}