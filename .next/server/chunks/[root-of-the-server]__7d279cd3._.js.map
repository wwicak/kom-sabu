{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/dimastriwicaksono/Documents/kominfo-sabu/src/lib/mongodb.ts"],"sourcesContent":["import { MongoClient, Db } from 'mongodb'\n\nif (!process.env.MONGODB_URI) {\n  throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"')\n}\n\nconst uri = process.env.MONGODB_URI\nconst options = {\n  maxPoolSize: 10,\n  serverSelectionTimeoutMS: 5000,\n  socketTimeoutMS: 45000,\n}\n\nlet client: MongoClient\nlet clientPromise: Promise<MongoClient>\n\nif (process.env.NODE_ENV === 'development') {\n  // In development mode, use a global variable so that the value\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\n  let globalWithMongo = global as typeof globalThis & {\n    _mongoClientPromise?: Promise<MongoClient>\n  }\n\n  if (!globalWithMongo._mongoClientPromise) {\n    client = new MongoClient(uri, options)\n    globalWithMongo._mongoClientPromise = client.connect()\n  }\n  clientPromise = globalWithMongo._mongoClientPromise\n} else {\n  // In production mode, it's best to not use a global variable.\n  client = new MongoClient(uri, options)\n  clientPromise = client.connect()\n}\n\n// Database connection helper\nexport async function connectToDatabase(): Promise<{ client: MongoClient; db: Db }> {\n  try {\n    const client = await clientPromise\n    const db = client.db('sabu-raijua')\n    return { client, db }\n  } catch (error) {\n    console.error('Failed to connect to MongoDB:', error)\n    throw new Error('Database connection failed')\n  }\n}\n\n// Health check for database connection\nexport async function checkDatabaseHealth(): Promise<boolean> {\n  try {\n    const { client } = await connectToDatabase()\n    await client.db('admin').command({ ping: 1 })\n    return true\n  } catch (error) {\n    console.error('Database health check failed:', error)\n    return false\n  }\n}\n\n// Graceful shutdown\nexport async function closeDatabaseConnection(): Promise<void> {\n  try {\n    const client = await clientPromise\n    await client.close()\n  } catch (error) {\n    console.error('Error closing database connection:', error)\n  }\n}\n\nexport default clientPromise\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU;IACd,aAAa;IACb,0BAA0B;IAC1B,iBAAiB;AACnB;AAEA,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,IAAI,kBAAkB;IAItB,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,gBAAgB,mBAAmB;AACrD,OAAO;;AAIP;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM;QACrB,MAAM,KAAK,OAAO,EAAE,CAAC;QACrB,OAAO;YAAE;YAAQ;QAAG;IACtB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM;QACzB,MAAM,OAAO,EAAE,CAAC,SAAS,OAAO,CAAC;YAAE,MAAM;QAAE;QAC3C,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;IACT;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM;QACrB,MAAM,OAAO,KAAK;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;IACtD;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":["file:///Users/dimastriwicaksono/Documents/kominfo-sabu/src/lib/models/index.ts"],"sourcesContent":["import mongoose from 'mongoose'\n\n// Contact Form Schema\nconst contactFormSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 100,\n    validate: {\n      validator: (v: string) => /^[a-zA-Z\\s'-]+$/.test(v),\n      message: 'Name can only contain letters, spaces, hyphens, and apostrophes'\n    }\n  },\n  email: {\n    type: String,\n    required: true,\n    trim: true,\n    lowercase: true,\n    maxlength: 254,\n    validate: {\n      validator: (v: string) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(v),\n      message: 'Please enter a valid email address'\n    }\n  },\n  phone: {\n    type: String,\n    trim: true,\n    validate: {\n      validator: (v: string) => !v || /^[\\+]?[1-9][\\d]{0,15}$/.test(v),\n      message: 'Please enter a valid phone number'\n    }\n  },\n  company: {\n    type: String,\n    trim: true,\n    maxlength: 100\n  },\n  subject: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 200\n  },\n  message: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 1000\n  },\n  consent: {\n    type: Boolean,\n    required: true,\n    validate: {\n      validator: (v: boolean) => v === true,\n      message: 'Consent is required'\n    }\n  },\n  status: {\n    type: String,\n    enum: ['pending', 'read', 'replied', 'archived'],\n    default: 'pending'\n  },\n  submissionToken: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  ipAddress: {\n    type: String,\n    required: true\n  },\n  userAgent: String,\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n})\n\n// Gallery Item Schema\nconst galleryItemSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 200\n  },\n  description: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 500\n  },\n  imageUrl: {\n    type: String,\n    required: true\n  },\n  thumbnailUrl: String,\n  category: {\n    type: String,\n    required: true,\n    enum: ['Pemerintahan', 'Pembangunan', 'Sosial', 'Budaya', 'Kesehatan', 'Pendidikan']\n  },\n  tags: [String],\n  isPublished: {\n    type: Boolean,\n    default: false\n  },\n  publishedAt: Date,\n  uploadedBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  },\n  metadata: {\n    fileSize: Number,\n    dimensions: {\n      width: Number,\n      height: Number\n    },\n    format: String\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n})\n\n// News/Article Schema\nconst newsSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 200\n  },\n  slug: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true\n  },\n  excerpt: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 300\n  },\n  content: {\n    type: String,\n    required: true\n  },\n  featuredImage: String,\n  category: {\n    type: String,\n    required: true,\n    enum: ['Berita', 'Pengumuman', 'Artikel', 'Press Release']\n  },\n  tags: [String],\n  author: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  isPublished: {\n    type: Boolean,\n    default: false\n  },\n  publishedAt: Date,\n  views: {\n    type: Number,\n    default: 0\n  },\n  seoTitle: String,\n  seoDescription: String,\n  seoKeywords: [String],\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n})\n\n// Agenda Schema\nconst agendaSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 200\n  },\n  description: {\n    type: String,\n    trim: true,\n    maxlength: 1000\n  },\n  startDate: {\n    type: Date,\n    required: true\n  },\n  endDate: Date,\n  startTime: String,\n  endTime: String,\n  location: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 200\n  },\n  type: {\n    type: String,\n    required: true,\n    enum: ['Rapat', 'Upacara', 'Kunjungan', 'Acara', 'Pelatihan', 'Lainnya']\n  },\n  organizer: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  participants: [String],\n  isPublic: {\n    type: Boolean,\n    default: true\n  },\n  status: {\n    type: String,\n    enum: ['scheduled', 'ongoing', 'completed', 'cancelled'],\n    default: 'scheduled'\n  },\n  createdBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n})\n\n// User Schema (for admin/staff)\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    minlength: 3,\n    maxlength: 30\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    lowercase: true\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 8\n  },\n  fullName: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 100\n  },\n  role: {\n    type: String,\n    enum: ['admin', 'editor', 'viewer'],\n    default: 'viewer'\n  },\n  department: String,\n  position: String,\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  lastLogin: Date,\n  loginAttempts: {\n    type: Number,\n    default: 0\n  },\n  lockUntil: Date,\n  passwordResetToken: String,\n  passwordResetExpires: Date,\n  twoFactorSecret: String,\n  twoFactorEnabled: {\n    type: Boolean,\n    default: false\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n})\n\n// Kecamatan Schema\nconst kecamatanSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 100,\n    unique: true\n  },\n  slug: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true\n  },\n  description: {\n    type: String,\n    trim: true,\n    maxlength: 1000\n  },\n  area: {\n    type: Number, // in kmÂ²\n    required: true\n  },\n  population: {\n    type: Number,\n    required: true\n  },\n  villages: {\n    type: Number, // number of villages/desa\n    required: true\n  },\n  coordinates: {\n    center: {\n      lat: { type: Number, required: true },\n      lng: { type: Number, required: true }\n    },\n    bounds: {\n      north: Number,\n      south: Number,\n      east: Number,\n      west: Number\n    }\n  },\n  polygon: {\n    type: {\n      type: String,\n      enum: ['Polygon', 'MultiPolygon'],\n      default: 'Polygon'\n    },\n    coordinates: {\n      type: [[[Number]]], // GeoJSON polygon coordinates\n      required: true\n    }\n  },\n  potency: {\n    agriculture: {\n      mainCrops: [String],\n      productivity: String,\n      farmingArea: Number // in hectares\n    },\n    fishery: {\n      mainSpecies: [String],\n      productivity: String,\n      fishingArea: Number // in hectares\n    },\n    tourism: {\n      attractions: [String],\n      facilities: [String],\n      annualVisitors: Number\n    },\n    economy: {\n      mainSectors: [String],\n      averageIncome: Number,\n      businessUnits: Number\n    },\n    infrastructure: {\n      roads: String, // condition description\n      electricity: Number, // percentage coverage\n      water: Number, // percentage coverage\n      internet: Number // percentage coverage\n    }\n  },\n  demographics: {\n    ageGroups: {\n      children: Number, // 0-14 years\n      adults: Number, // 15-64 years\n      elderly: Number // 65+ years\n    },\n    education: {\n      elementary: Number,\n      junior: Number,\n      senior: Number,\n      higher: Number\n    },\n    occupation: {\n      agriculture: Number,\n      fishery: Number,\n      trade: Number,\n      services: Number,\n      others: Number\n    }\n  },\n  images: [{\n    url: String,\n    caption: String,\n    category: {\n      type: String,\n      enum: ['landscape', 'culture', 'economy', 'infrastructure', 'tourism']\n    }\n  }],\n  headOffice: {\n    address: String,\n    phone: String,\n    email: String,\n    head: String // Camat name\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  lastUpdated: {\n    type: Date,\n    default: Date.now\n  },\n  updatedBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  }\n}, {\n  timestamps: true\n})\n\n// Audit Log Schema\nconst auditLogSchema = new mongoose.Schema({\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  },\n  action: {\n    type: String,\n    required: true\n  },\n  resource: {\n    type: String,\n    required: true\n  },\n  resourceId: String,\n  details: mongoose.Schema.Types.Mixed,\n  ipAddress: String,\n  userAgent: String,\n  timestamp: {\n    type: Date,\n    default: Date.now\n  }\n})\n\n// Create indexes for better performance (only for non-unique fields)\ncontactFormSchema.index({ createdAt: -1 })\ncontactFormSchema.index({ status: 1 })\ngalleryItemSchema.index({ category: 1, isPublished: 1 })\ngalleryItemSchema.index({ createdAt: -1 })\n// newsSchema slug already has unique: true, no need for manual index\nnewsSchema.index({ category: 1, isPublished: 1 })\nnewsSchema.index({ publishedAt: -1 })\nagendaSchema.index({ startDate: 1 })\nagendaSchema.index({ isPublic: 1, status: 1 })\n// userSchema email and username already have unique: true, no need for manual indexes\n// kecamatanSchema slug and name already have unique: true, no need for manual indexes\nkecamatanSchema.index({ isActive: 1 })\nkecamatanSchema.index({ 'coordinates.center': '2dsphere' })\nauditLogSchema.index({ timestamp: -1 })\nauditLogSchema.index({ userId: 1 })\n\n// Export models\nexport const ContactForm = mongoose.models.ContactForm || mongoose.model('ContactForm', contactFormSchema)\nexport const GalleryItem = mongoose.models.GalleryItem || mongoose.model('GalleryItem', galleryItemSchema)\nexport const News = mongoose.models.News || mongoose.model('News', newsSchema)\nexport const Agenda = mongoose.models.Agenda || mongoose.model('Agenda', agendaSchema)\nexport const User = mongoose.models.User || mongoose.model('User', userSchema)\nexport const Kecamatan = mongoose.models.Kecamatan || mongoose.model('Kecamatan', kecamatanSchema)\nexport const AuditLog = mongoose.models.AuditLog || mongoose.model('AuditLog', auditLogSchema)\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 762, "column": 0}, "map": {"version":3,"sources":["file:///Users/dimastriwicaksono/Documents/kominfo-sabu/src/app/api/kecamatan/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { connectToDatabase } from '@/lib/mongodb'\nimport { Kecamatan } from '@/lib/models'\nimport { z } from 'zod'\n\n// GET /api/kecamatan - Get all kecamatan data\nexport async function GET(request: NextRequest) {\n  try {\n    // Ensure database connection\n    await connectToDatabase()\n\n    const { searchParams } = new URL(request.url)\n    const includeInactive = searchParams.get('includeInactive') === 'true'\n\n    const filter = includeInactive ? {} : { isActive: true }\n\n    // Add timeout and error handling\n    const kecamatanData = await Promise.race([\n      Kecamatan.find(filter)\n        .select('-__v')\n        .sort({ name: 1 })\n        .lean()\n        .exec(),\n      new Promise((_, reject) =>\n        setTimeout(() => reject(new Error('Database query timeout')), 8000)\n      )\n    ])\n\n    return NextResponse.json({\n      success: true,\n      data: kecamatanData\n    })\n  } catch (error) {\n    console.error('Error fetching kecamatan data:', error)\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to fetch kecamatan data',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// POST /api/kecamatan - Create new kecamatan (admin only)\nconst createKecamatanSchema = z.object({\n  name: z.string().min(1).max(100),\n  slug: z.string().min(1).max(100),\n  description: z.string().max(1000).optional(),\n  area: z.number().positive(),\n  population: z.number().int().positive(),\n  villages: z.number().int().positive(),\n  coordinates: z.object({\n    center: z.object({\n      lat: z.number(),\n      lng: z.number()\n    }),\n    bounds: z.object({\n      north: z.number(),\n      south: z.number(),\n      east: z.number(),\n      west: z.number()\n    }).optional()\n  }),\n  polygon: z.object({\n    type: z.enum(['Polygon', 'MultiPolygon']),\n    coordinates: z.array(z.array(z.array(z.number())))\n  }),\n  potency: z.object({\n    agriculture: z.object({\n      mainCrops: z.array(z.string()),\n      productivity: z.string(),\n      farmingArea: z.number()\n    }).optional(),\n    fishery: z.object({\n      mainSpecies: z.array(z.string()),\n      productivity: z.string(),\n      fishingArea: z.number()\n    }).optional(),\n    tourism: z.object({\n      attractions: z.array(z.string()),\n      facilities: z.array(z.string()),\n      annualVisitors: z.number()\n    }).optional(),\n    economy: z.object({\n      mainSectors: z.array(z.string()),\n      averageIncome: z.number(),\n      businessUnits: z.number()\n    }).optional(),\n    infrastructure: z.object({\n      roads: z.string(),\n      electricity: z.number(),\n      water: z.number(),\n      internet: z.number()\n    }).optional()\n  }).optional(),\n  demographics: z.object({\n    ageGroups: z.object({\n      children: z.number(),\n      adults: z.number(),\n      elderly: z.number()\n    }),\n    education: z.object({\n      elementary: z.number(),\n      junior: z.number(),\n      senior: z.number(),\n      higher: z.number()\n    }),\n    occupation: z.object({\n      agriculture: z.number(),\n      fishery: z.number(),\n      trade: z.number(),\n      services: z.number(),\n      others: z.number()\n    })\n  }),\n  images: z.array(z.object({\n    url: z.string(),\n    caption: z.string(),\n    category: z.enum(['landscape', 'culture', 'economy', 'infrastructure', 'tourism'])\n  })).optional(),\n  headOffice: z.object({\n    address: z.string(),\n    phone: z.string(),\n    email: z.string(),\n    head: z.string()\n  }).optional()\n})\n\nexport async function POST(request: NextRequest) {\n  try {\n    await connectToDatabase()\n    \n    const body = await request.json()\n    const validatedData = createKecamatanSchema.parse(body)\n    \n    // Check if slug already exists\n    const existingKecamatan = await Kecamatan.findOne({ slug: validatedData.slug })\n    if (existingKecamatan) {\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Kecamatan with this slug already exists' \n        },\n        { status: 400 }\n      )\n    }\n    \n    const newKecamatan = new Kecamatan(validatedData)\n    await newKecamatan.save()\n    \n    return NextResponse.json({\n      success: true,\n      data: newKecamatan\n    }, { status: 201 })\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Validation error',\n          details: error.errors\n        },\n        { status: 400 }\n      )\n    }\n    \n    console.error('Error creating kecamatan:', error)\n    return NextResponse.json(\n      { \n        success: false, \n        error: 'Failed to create kecamatan' \n      },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}