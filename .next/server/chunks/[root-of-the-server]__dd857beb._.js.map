{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/dimastriwicaksono/Documents/kominfo-sabu/src/lib/models/index.ts"],"sourcesContent":["import mongoose from 'mongoose'\n\n// Contact Form Schema\nconst contactFormSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 100,\n    validate: {\n      validator: (v: string) => /^[a-zA-Z\\s'-]+$/.test(v),\n      message: 'Name can only contain letters, spaces, hyphens, and apostrophes'\n    }\n  },\n  email: {\n    type: String,\n    required: true,\n    trim: true,\n    lowercase: true,\n    maxlength: 254,\n    validate: {\n      validator: (v: string) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(v),\n      message: 'Please enter a valid email address'\n    }\n  },\n  phone: {\n    type: String,\n    trim: true,\n    validate: {\n      validator: (v: string) => !v || /^[\\+]?[1-9][\\d]{0,15}$/.test(v),\n      message: 'Please enter a valid phone number'\n    }\n  },\n  company: {\n    type: String,\n    trim: true,\n    maxlength: 100\n  },\n  subject: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 200\n  },\n  message: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 1000\n  },\n  consent: {\n    type: Boolean,\n    required: true,\n    validate: {\n      validator: (v: boolean) => v === true,\n      message: 'Consent is required'\n    }\n  },\n  status: {\n    type: String,\n    enum: ['pending', 'read', 'replied', 'archived'],\n    default: 'pending'\n  },\n  submissionToken: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  ipAddress: {\n    type: String,\n    required: true\n  },\n  userAgent: String,\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n})\n\n// Gallery Item Schema\nconst galleryItemSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 200\n  },\n  description: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 500\n  },\n  imageUrl: {\n    type: String,\n    required: true\n  },\n  thumbnailUrl: String,\n  category: {\n    type: String,\n    required: true,\n    enum: ['Pemerintahan', 'Pembangunan', 'Sosial', 'Budaya', 'Kesehatan', 'Pendidikan']\n  },\n  tags: [String],\n  isPublished: {\n    type: Boolean,\n    default: false\n  },\n  publishedAt: Date,\n  uploadedBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  },\n  metadata: {\n    fileSize: Number,\n    dimensions: {\n      width: Number,\n      height: Number\n    },\n    format: String\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n})\n\n// News/Article Schema\nconst newsSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 200\n  },\n  slug: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true\n  },\n  excerpt: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 300\n  },\n  content: {\n    type: String,\n    required: true\n  },\n  featuredImage: String,\n  category: {\n    type: String,\n    required: true,\n    enum: ['Berita', 'Pengumuman', 'Artikel', 'Press Release']\n  },\n  tags: [String],\n  author: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  isPublished: {\n    type: Boolean,\n    default: false\n  },\n  publishedAt: Date,\n  views: {\n    type: Number,\n    default: 0\n  },\n  seoTitle: String,\n  seoDescription: String,\n  seoKeywords: [String],\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n})\n\n// Agenda Schema\nconst agendaSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 200\n  },\n  description: {\n    type: String,\n    trim: true,\n    maxlength: 1000\n  },\n  startDate: {\n    type: Date,\n    required: true\n  },\n  endDate: Date,\n  startTime: String,\n  endTime: String,\n  location: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 200\n  },\n  type: {\n    type: String,\n    required: true,\n    enum: ['Rapat', 'Upacara', 'Kunjungan', 'Acara', 'Pelatihan', 'Lainnya']\n  },\n  organizer: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  participants: [String],\n  isPublic: {\n    type: Boolean,\n    default: true\n  },\n  status: {\n    type: String,\n    enum: ['scheduled', 'ongoing', 'completed', 'cancelled'],\n    default: 'scheduled'\n  },\n  createdBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n})\n\n// User Schema (for admin/staff)\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    minlength: 3,\n    maxlength: 30\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    lowercase: true\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 8\n  },\n  fullName: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 100\n  },\n  role: {\n    type: String,\n    enum: ['admin', 'editor', 'viewer'],\n    default: 'viewer'\n  },\n  department: String,\n  position: String,\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  lastLogin: Date,\n  loginAttempts: {\n    type: Number,\n    default: 0\n  },\n  lockUntil: Date,\n  passwordResetToken: String,\n  passwordResetExpires: Date,\n  twoFactorSecret: String,\n  twoFactorEnabled: {\n    type: Boolean,\n    default: false\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n})\n\n// Kecamatan Schema\nconst kecamatanSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 100,\n    unique: true\n  },\n  slug: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true\n  },\n  description: {\n    type: String,\n    trim: true,\n    maxlength: 1000\n  },\n  area: {\n    type: Number, // in kmÂ²\n    required: true\n  },\n  population: {\n    type: Number,\n    required: true\n  },\n  villages: {\n    type: Number, // number of villages/desa\n    required: true\n  },\n  coordinates: {\n    center: {\n      lat: { type: Number, required: true },\n      lng: { type: Number, required: true }\n    },\n    bounds: {\n      north: Number,\n      south: Number,\n      east: Number,\n      west: Number\n    }\n  },\n  polygon: {\n    type: {\n      type: String,\n      enum: ['Polygon', 'MultiPolygon'],\n      default: 'Polygon'\n    },\n    coordinates: {\n      type: [[[Number]]], // GeoJSON polygon coordinates\n      required: true\n    }\n  },\n  potency: {\n    agriculture: {\n      mainCrops: [String],\n      productivity: String,\n      farmingArea: Number // in hectares\n    },\n    fishery: {\n      mainSpecies: [String],\n      productivity: String,\n      fishingArea: Number // in hectares\n    },\n    tourism: {\n      attractions: [String],\n      facilities: [String],\n      annualVisitors: Number\n    },\n    economy: {\n      mainSectors: [String],\n      averageIncome: Number,\n      businessUnits: Number\n    },\n    infrastructure: {\n      roads: String, // condition description\n      electricity: Number, // percentage coverage\n      water: Number, // percentage coverage\n      internet: Number // percentage coverage\n    }\n  },\n  demographics: {\n    ageGroups: {\n      children: Number, // 0-14 years\n      adults: Number, // 15-64 years\n      elderly: Number // 65+ years\n    },\n    education: {\n      elementary: Number,\n      junior: Number,\n      senior: Number,\n      higher: Number\n    },\n    occupation: {\n      agriculture: Number,\n      fishery: Number,\n      trade: Number,\n      services: Number,\n      others: Number\n    }\n  },\n  images: [{\n    url: String,\n    caption: String,\n    category: {\n      type: String,\n      enum: ['landscape', 'culture', 'economy', 'infrastructure', 'tourism']\n    }\n  }],\n  headOffice: {\n    address: String,\n    phone: String,\n    email: String,\n    head: String // Camat name\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  lastUpdated: {\n    type: Date,\n    default: Date.now\n  },\n  updatedBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  }\n}, {\n  timestamps: true\n})\n\n// Audit Log Schema\nconst auditLogSchema = new mongoose.Schema({\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  },\n  action: {\n    type: String,\n    required: true\n  },\n  resource: {\n    type: String,\n    required: true\n  },\n  resourceId: String,\n  details: mongoose.Schema.Types.Mixed,\n  ipAddress: String,\n  userAgent: String,\n  timestamp: {\n    type: Date,\n    default: Date.now\n  }\n})\n\n// Create indexes for better performance (only for non-unique fields)\ncontactFormSchema.index({ createdAt: -1 })\ncontactFormSchema.index({ status: 1 })\ngalleryItemSchema.index({ category: 1, isPublished: 1 })\ngalleryItemSchema.index({ createdAt: -1 })\n// newsSchema slug already has unique: true, no need for manual index\nnewsSchema.index({ category: 1, isPublished: 1 })\nnewsSchema.index({ publishedAt: -1 })\nagendaSchema.index({ startDate: 1 })\nagendaSchema.index({ isPublic: 1, status: 1 })\n// userSchema email and username already have unique: true, no need for manual indexes\n// kecamatanSchema slug and name already have unique: true, no need for manual indexes\nkecamatanSchema.index({ isActive: 1 })\nkecamatanSchema.index({ 'coordinates.center': '2dsphere' })\nauditLogSchema.index({ timestamp: -1 })\nauditLogSchema.index({ userId: 1 })\n\n// Export models\nexport const ContactForm = mongoose.models.ContactForm || mongoose.model('ContactForm', contactFormSchema)\nexport const GalleryItem = mongoose.models.GalleryItem || mongoose.model('GalleryItem', galleryItemSchema)\nexport const News = mongoose.models.News || mongoose.model('News', newsSchema)\nexport const Agenda = mongoose.models.Agenda || mongoose.model('Agenda', agendaSchema)\nexport const User = mongoose.models.User || mongoose.model('User', userSchema)\nexport const Kecamatan = mongoose.models.Kecamatan || mongoose.model('Kecamatan', kecamatanSchema)\nexport const AuditLog = mongoose.models.AuditLog || mongoose.model('AuditLog', auditLogSchema)\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 683, "column": 0}, "map": {"version":3,"sources":["file:///Users/dimastriwicaksono/Documents/kominfo-sabu/src/app/api/test-db/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport mongoose from 'mongoose'\nimport { Kecamatan } from '@/lib/models'\n\nexport async function GET() {\n  try {\n    // Check if already connected\n    if (mongoose.connection.readyState !== 1) {\n      // Try to connect\n      await mongoose.connect(process.env.MONGODB_URI!, {\n        maxPoolSize: 10,\n        serverSelectionTimeoutMS: 5000,\n        socketTimeoutMS: 45000,\n      })\n    }\n\n\n\n    // Test Kecamatan collection\n    const count = await Kecamatan.countDocuments()\n    const sample = await Kecamatan.findOne().select('name slug').lean()\n\n    return NextResponse.json({\n      success: true,\n      message: 'Successfully connected to MongoDB',\n      state: mongoose.connection.readyState,\n      host: mongoose.connection.host,\n      name: mongoose.connection.name,\n      kecamatanCount: count,\n      sampleKecamatan: sample\n    })\n  } catch (error) {\n    console.error('Database connection error:', error)\n    return NextResponse.json(\n      { \n        success: false, \n        error: 'Failed to connect to database',\n        details: error instanceof Error ? error.message : 'Unknown error',\n        state: mongoose.connection.readyState\n      },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe;IACpB,IAAI;QACF,6BAA6B;QAC7B,IAAI,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,KAAK,GAAG;YACxC,iBAAiB;YACjB,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAG;gBAC/C,aAAa;gBACb,0BAA0B;gBAC1B,iBAAiB;YACnB;QACF;QAIA,4BAA4B;QAC5B,MAAM,QAAQ,MAAM,+HAAA,CAAA,YAAS,CAAC,cAAc;QAC5C,MAAM,SAAS,MAAM,+HAAA,CAAA,YAAS,CAAC,OAAO,GAAG,MAAM,CAAC,aAAa,IAAI;QAEjE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,OAAO,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU;YACrC,MAAM,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,IAAI;YAC9B,MAAM,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,IAAI;YAC9B,gBAAgB;YAChB,iBAAiB;QACnB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAClD,OAAO,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU;QACvC,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}